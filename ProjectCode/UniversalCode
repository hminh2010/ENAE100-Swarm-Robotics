//defines states for bots - HIDING_BOT runs the loop for when bot hasn't been caught, CAUGHT_BOT runs when it is caught
#include <kilolib.h>
#define HIDING_BOT 0 
#define CAUGHT_BOT 1 
#define HUNTER_BOT 2
#define GRADIENT_MAX 255
#define SEED_ID 42

int own_gradient = GRADIENT_MAX;
int received_gradient = 0;
int new_message = 0;
message_t message;

int state = 0;
uint32_t last_changed = 0;
//declare variables to hold the state and the clock ticks

void setup
{
    //If the robot is the seed, its gradient should be 0: overwrite the 
    // previously set value of GRADIENT_MAX.
    if (kilo_uid == SEED_ID)
    {
        state = HUNTER_BOT;
        own_gradient = 0;
    }
    
    else
    {
        state = HIDING_BOT;
    }
    last_state_update = kilo_ticks;
    // Set the transmission message.
    message.type = NORMAL;
    message.data[0] = own_gradient;
    message.crc = message_crc(&message);
}

void loop
{
    if (kilo_ticks > (last_state_update + 64))
    {
        last_state_update = kilo_ticks;
        
        if (state == HIDING_BOT)
        {
            set_color(RGB(0, 1, 0)); //green light means bot hasn't been frozen
                // Only pay attention to messages if this robot is not the seed.
            if (kilo_uid != SEED_ID)
            {
                if (new_message == 1)
                {
                // If a neighbor's gradient is 2 or more less than this robot's 
                // gradient, reduce the latter to the neighbor's gradient + 1
                    if (own_gradient > received_gradient + 1)
                    {
                        own_gradient = received_gradient + 1;
                        // Update the transmission message whenever the gradient changes.
                        message.type = NORMAL;
                        message.data[0] = own_gradient;
                        message.crc = message_crc(&message);
                        
                    }
                    
                    new_message = 0;
                }
            
            }
            if (own_gradient == 0) //if seeker bot is right next to hider bot, change state to CAUGHT_BOT
            {
                state = CAUGHT_BOT
            }
            else
            {
                spinup_motors();
                set_motors(kilo_straight_left, kilo_straight_right);//needs to be randomized
            }
        }

        else if (state == CAUGHT_BOT)
        {
            set_color(RGB(0, 0, 1)); //blue light means bot has been frozen
            //bot does nothing
        }
        
        else if (state == HUNTER_BOT)
        {
            set_color(RGB(1, 0, 0));
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_righ
            
        }
   }  
}

message_t *message_tx()
{
    return &message;
}

void message_rx(message_t *m, distance_measurement_t *d)
{
    // Only process this message if the previous one has been processed.
    if (new_message == 0)
    {
        new_message = 1;
        received_gradient = m->data[0];
    }
}

int main
{
    kilo_init();
    kilo_message_rx = message_rx;
    kilo_message_tx = message_tx;
    kilo_start(setup, loop);
    
    return 0;
}
